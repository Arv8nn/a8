name: Keep Servers Alive

on:
  schedule:
   - cron: '0 */4 * * *' # Executed every 4 hours (the private library has a running time of 500 minutes per month and 16 minutes per day)
  workflow_dispatch: 

jobs:
  keep_servers_alive:
    runs-on: ubuntu-latest
    env:
    # serv00 variable addition ruleÔºö
    # Recommendation: To ensure node availability, it is recommended not to set a port on the Serv00 web page. The script will randomly generate a valid port. The first run will interrupt SSH. Please set RES to n and then execute it.
    # RES (required): n means not to reset the deployment every time, y means to reset the deployment every time. SSH_USER (required) indicates the serv00 account name. SSH_PASS (required) indicates the serv00 password. REALITY means reality domain name (leaving blank means serv00 official domain name: your serv00 account name.serv00.net). SUUID represents uuid (leave blank to represent random uuid). TCP1_PORT represents the tcp port of vless (leaving blank represents a random tcp port). TCP2_PORT indicates the tcp port of vmess (leaving blank indicates a random tcp port). UDP_PORT represents the udp port of hy2 (leave blank to represent a random udp port). HOST (required) means logging in to the serv00 server domain name. ARGO_DOMAIN represents the argo fixed domain name (leaving blank represents a temporary domain name). ARGO_AUTH represents the argo fixed domain name token (leaving blank represents a temporary domain name).
    # Required variables: RES, SSH_USER, SSH_PASS, HOST
    # Note []"",: Do not delete these symbols randomly and align them according to rules.
    # There is one {serv00 server} in each line, or one service. Use "," at the end. There is no need to use "," at the end of the last server.
      ACCOUNTS: >
        [
        {"RES":"n", "SSH_USER":"Your serv00 account name", "SSH_PASS":"Your serv00 account password", "REALITY":"Your serv00 account name.serv00.net", "SUUID":"Custom UUID", "TCP1_PORT":"vless tcp port", "TCP2_PORT":"vmess tcp port", "UDP_PORT":"hy2 udp port", "HOST":"s1.serv00.com", "ARGO_DOMAIN":"", "ARGO_AUTH":""},
        {"RES":"y", "SSH_USER":"123456", "SSH_PASS":"7890000", "REALITY":"time.is", "SUUID":"73203ee6-b3fa-4a3d-b5df-6bb2f55073ad", "TCP1_PORT":"55254", "TCP2_PORT":"55255", "UDP_PORT":"55256", "HOST":"s16.serv00.com", "ARGO_DOMAIN":"Your argo fixed domain name", "ARGO_AUTH":"eyJhIjoiOTM3YzFjYWI88552NTFiYTM4ZTY0ZDQzRmlNelF0TkRBd1pUQTRNVEJqTUdVeCJ9"} 
        ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass curl jq

      - name: Process each account
        run: |
          run_remote_command() {
          local RES=$1
          local SSH_USER=$2
          local SSH_PASS=$3
          local REALITY=${4}
          local SUUID=$5
          local TCP1_PORT=$6
          local TCP2_PORT=$7
          local UDP_PORT=$8
          local HOST=$9
          local ARGO_DOMAIN=${10}
          local ARGO_AUTH=${11}
          if [ -z "${ARGO_DOMAIN}" ]; then
          echo "Argo domain name is empty, apply for Argo temporary domain name"
          else
          echo "Argo has set a fixed domain nameÔºö${ARGO_DOMAIN}"
          fi
          remote_command="export reym=$REALITY UUID=$SUUID vless_port=$TCP1_PORT vmess_port=$TCP2_PORT hy2_port=$UDP_PORT reset=$RES ARGO_DOMAIN=${ARGO_DOMAIN} ARGO_AUTH=${ARGO_AUTH} && bash <(curl -Ls https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/serv00keep.sh)"
          echo "Executing remote command on $HOST as $SSH_USER with command: $remote_command"
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$HOST" "$remote_command"
           }
                 echo "*******************ARV8N***********************"

              count=0  
           for account in $(echo "${ACCOUNTS}" | jq -c '.[]'); do
              count=$((count+1))
              RES=$(echo $account | jq -r '.RES')
              SSH_USER=$(echo $account | jq -r '.SSH_USER')
              SSH_PASS=$(echo $account | jq -r '.SSH_PASS')
              REALITY=$(echo $account | jq -r '.REALITY')
              SUUID=$(echo $account | jq -r '.SUUID')
              TCP1_PORT=$(echo $account | jq -r '.TCP1_PORT')
              TCP2_PORT=$(echo $account | jq -r '.TCP2_PORT')
              UDP_PORT=$(echo $account | jq -r '.UDP_PORT')
              HOST=$(echo $account | jq -r '.HOST')
              ARGO_DOMAIN=$(echo $account | jq -r '.ARGO_DOMAIN')
              ARGO_AUTH=$(echo $account | jq -r '.ARGO_AUTH') 
          if sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$HOST" -q exit; then
            echo "üéâCongratulationsÔºÅ‚úÖNo.„Äê$count„ÄëServer connection successfulÔºÅüöÄServer addressÔºö$HOST ÔºåAccount nameÔºö$SSH_USER"   
          if [ -z "${ARGO_DOMAIN}" ]; then
           check_process="ps aux | grep '[c]onfig' > /dev/null && ps aux | grep [l]ocalhost:$TCP2_PORT > /dev/null"
            else
           check_process="ps aux | grep '[c]onfig' > /dev/null && ps aux | grep '[t]oken $ARGO_AUTH' > /dev/null"
           fi
          if ! sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$HOST" "$check_process" || [[ "$RES" =~ ^[Yy]$ ]]; then
            echo "‚ö†Ô∏èIt is detected that the main process or argo process has not started, or a reset is performed."
             echo "‚ö†Ô∏èRepair or reset deployment now...please wait"
             echo "‚ö†Ô∏èhintError: Process completed with exit code 255When interrupting and exiting, it means that setting the random port is completed. Please set RES to n and then execute it."
             output=$(run_remote_command "$RES" "$SSH_USER" "$SSH_PASS" "${REALITY}" "$SUUID" "$TCP1_PORT" "$TCP2_PORT" "$UDP_PORT" "$HOST" "${ARGO_DOMAIN}" "${ARGO_AUTH}")
            echo "Remote command execution resultsÔºö$output"
          else
            echo "üéâCongratulationsÔºÅ‚úÖDetected that all processes are running normally "
            echo "The configuration is shown belowÔºö"
          sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no "$SSH_USER@$HOST" \
             "cat domains/\$(whoami).serv00.net/logs/list.txt; \
              echo '===================================================='" 
            fi
           else
            echo "===================================================="
            echo "üí•cupsÔºÅ‚ùåNo.„Äê$count„ÄëServer connection failedÔºÅüöÄServer addressÔºö$HOST ÔºåAccount nameÔºö$SSH_USER"
            echo "‚ö†Ô∏èMaybe the account name, password, and server name are entered incorrectly, or the current server is under maintenance."  
            echo "===================================================="
           fi
            done
